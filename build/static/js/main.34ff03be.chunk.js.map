{"version":3,"sources":["server.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","path","App","state","exchange","stocks","ready_stock","ready_exchange","on","disconnect","bind","console","log","copyStocks","emit","data","num","setState","copyExchange","i","length","indexOf","push","date","Date","formattedTime","getHours","getMinutes","substr","value","Math","round","market_total","ex","connected","this","connect","getInitialStock","getInitialExchange","updateStock","tickerSell","tickerBuy","className","style","backgroundColor","width","marginBottom","Row","Col","md","span","offset","justifyContent","textAlign","fontSize","fontWeight","color","Button","variant","size","onClick","Object","keys","map","key","index","xs","textTransform","Table","borderColor","align","values","ticker","j","Container","height","margin","top","right","left","bottom","strokeDasharray","stroke","dataKey","domain","itemStyle","formatter","name","labelFormatter","type","fill","strokeWidth","marginTop","marginLeft","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.34ff03be.chunk.js","sourcesContent":["import * as io from 'socket.io-client';\nexport const socket = io('wss://le-18262636.bitzonte.com', {\n    path: '/stocks'\n  });","import React from 'react';\nimport { Container, Row, Col, Table, Button } from 'react-bootstrap/';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Line,\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip, \n  CartesianGrid,\n  ResponsiveContainer\n} from 'recharts';\n\nimport './styles/App.css';\nimport {socket} from './server'\n\nclass App extends React.Component{\n  constructor() {\n    super();\n    \n    this.state = {\n      exchange: {},\n      stocks: {},\n      ready_stock: false,\n      ready_exchange: false,\n      on: true\n    };\n    this.disconnect = this.disconnect.bind(this);\n  }\n  \n  getInitialStock() {\n    console.log('hola')\n    let copyStocks = {};\n    socket.emit('STOCKS');\n    socket.on('STOCKS', (data) => {\n      console.log(data)\n      for (const num in data) {\n        \n        copyStocks[data[num]['ticker']] = {\n          'company_name': data[num]['company_name'],\n          'country': data[num]['country'],\n          'total_volume': 0,\n          'higher': 0,\n          'lower': 0,\n          'last_price': 0,\n          'porcentual_change': 0,\n          'data': [],\n        };\n      }\n      this.setState({ stocks: copyStocks, ready_stock: true });\n    });\n  }\n\n  getInitialExchange(){\n    let copyExchange = {}\n    let stocks = {}\n    socket.emit('STOCKS')\n    socket.on('STOCKS', (data) => {\n      stocks = data\n    });\n    socket.emit('EXCHANGES')\n    socket.on('EXCHANGES', (data) => {\n      \n      for (const num in data) {\n        copyExchange[data[num]['exchange_ticker']] = {\n          'company_ticker': [],\n          'exchange_name': data[num]['name'],\n          'country': data[num]['country'],\n          'stocks':[...data[num]['listed_companies']],\n          'total_volume': 0,\n          'sell_volume': 0,\n          'buy_volume': 0,\n          'quantity': ([...data[num]['listed_companies']]).length,\n          'participation': 0\n        }\n        for (var i in stocks){\n          if (data[num]['listed_companies'].indexOf(stocks[i]['company_name']) >= 0){\n            copyExchange[data[num]['exchange_ticker']]['company_ticker'].push(stocks[i]['ticker'])\n        }}      \n      }\n      this.setState({ exchange: copyExchange, ready_exchange: true });\n    });\n  }\n\n  updateStock() {\n    socket.on('UPDATE',(data) => {\n      if (this.state.ready_stock && this.state.ready_exchange){\n        var date = new Date(data['time'] * 1000)\n        var hours = date.getHours()\n        var minutes = \"0\" + date.getMinutes()\n        var formattedTime = hours + ':' + minutes.substr(-2)\n        let copyStocks = { ...this.state.stocks };\n        copyStocks[data['ticker']]['data'].push({'time':formattedTime, value :data['value']});\n        if (copyStocks[data['ticker']]['lower']=== 0 || copyStocks[data['ticker']]['lower'] > data['value']){\n          copyStocks[data['ticker']]['lower'] = data['value']\n        }\n        if (copyStocks[data['ticker']]['higher'] < data['value']){\n          copyStocks[data['ticker']]['higher'] = data['value']\n        }\n        copyStocks[data['ticker']]['porcentual_change'] = Math.round(((data['value']*100/copyStocks[data['ticker']]['last_price'])-100) * 100) / 100\n        copyStocks[data['ticker']]['last_price'] = data['value']\n        this.setState({ stocks: copyStocks })\n      }\n    });\n  }\n\n  tickerBuy() {\n    socket.on('BUY',(data) => {\n      if (this.state.ready_stock && this.state.ready_exchange){\n        let copyStocks = {...this.state.stocks }\n        let copyExchange = { ...this.state.exchange }\n        let market_total = 0\n        copyStocks[data['ticker']]['total_volume'] = data['volume'] + copyStocks[data['ticker']]['total_volume']\n        for (const ex in copyExchange){\n          if (copyExchange[ex]['company_ticker'].indexOf(data['ticker']) >= 0){\n            copyExchange[ex]['buy_volume'] = data['volume'] + copyExchange[ex]['buy_volume']\n            copyExchange[ex]['total_volume'] = data['volume'] + copyExchange[ex]['total_volume']\n          }\n          market_total = market_total + copyExchange[ex]['total_volume']\n        }\n        for (const ex in copyExchange){\n          copyExchange[ex]['participation'] = Math.round(((copyExchange[ex]['total_volume']*100)/market_total) * 100) / 100\n        }\n        this.setState({ stocks: copyStocks, exchange: copyExchange })\n      }\n    });\n  }\n\n  tickerSell() {\n    socket.on('SELL',(data) => {\n      if (this.state.ready_stock && this.state.ready_exchange){\n        let copyStocks = {...this.state.stocks }\n        let copyExchange = {...this.state.exchange}\n        let market_total = 0\n        copyStocks[data['ticker']]['total_volume'] = data['volume'] + copyStocks[data['ticker']]['total_volume']\n        for (const ex in  copyExchange){\n          if (copyExchange[ex]['company_ticker'].indexOf(data['ticker']) >= 0){\n            copyExchange[ex]['sell_volume'] = data['volume'] + copyExchange[ex]['sell_volume']\n            copyExchange[ex]['total_volume'] = data['volume'] + copyExchange[ex]['total_volume']\n          }\n          market_total = market_total + copyExchange[ex]['total_volume']\n        }\n        for (const ex in copyExchange){\n          copyExchange[ex]['participation'] = Math.round(((copyExchange[ex]['total_volume']*100)/market_total) * 100) / 100\n        }\n        this.setState({ stocks: copyStocks, exchange: copyExchange })\n      }\n    });\n  }\n\n  disconnect(){\n    if (socket.connected){\n      socket.disconnect()\n      this.setState({ on : false })\n    }\n    else {\n      socket.connect()\n      this.setState({ on : true })\n    }\n  }\n\n  componentDidMount() {\n    this.getInitialStock();\n    this.getInitialExchange();\n    this.updateStock();\n    this.tickerSell();\n    this.tickerBuy();\n }\n\n  \n  render () {\n    // console.log(this.state.stocks)\n    if (this.state.ready_stock && this.state.ready_exchange) {\n      const { stocks } = this.state;\n      const { exchange } = this.state;\n      const { on } = this.state;\n      \n      return (\n        <div className=\"container\" style={{backgroundColor: '#2C2F38'}}>\n          <div style={{width: '90vw', marginBottom: '40px'}}>\n            <Row>\n              <Col md={{ span: 3, offset: 4 }}>\n                <div style={{justifyContent:'center', textAlign: 'center'}}>\n                  <h3 style={{fontSize: '26px', fontWeight: 'bold', color: '#FCACB8'}}>Stock Exchange Market</h3>\n                </div>\n              </Col>\n              <Col md={{ span: 2, offset: 3 }}>\n                <Button variant=\"secondary\" size=\"sm\" onClick={this.disconnect}>{on ? 'Desconectar Socket' : 'Conectar Socket'}</Button> \n              </Col>\n            </Row>\n          </div>\n          {\n            Object.keys(exchange).map((key, index) => (\n             <div style={{width: '90vw', marginBottom: '35px'}}>\n                <Row style={{backgroundColor: '#2C2F38'}}>\n                  <Col xs={12} md={6}>\n                    <p style={{fontSize: '20px', fontWeight: 'bold', color: 'white', textTransform: 'uppercase'}} key={index}>\n                      {exchange[key]['exchange_name']}\n                    </p>\n                  </Col>\n                  <Col xs={6} md={6}>\n                    <Table className=\"table table-sm table-bordered\">\n                      <thead>\n                        <tr style={{color: '#8C8F9C', fontSize: '12px'}}>\n                          <th style={{borderColor: '#8C8F9C'}} align=\"center\">Volumen Compra</th>\n                          <th style={{borderColor: '#8C8F9C'}} align=\"center\">Volumen Venta</th>\n                          <th style={{borderColor: '#8C8F9C'}} align=\"center\">Volumen Total</th>\n                          <th style={{borderColor: '#8C8F9C'}} align=\"center\">Cantidad Acciones</th>\n                          <th style={{borderColor: '#8C8F9C'}} align=\"center\">Participación Mercado</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr style={{color: 'white', fontSize: '14px'}}>\n                          <td style={{borderColor: '#8C8F9C'}} align=\"center\">{exchange[key]['buy_volume']}</td>\n                          <td style={{borderColor: '#8C8F9C'}} align=\"center\">{exchange[key]['sell_volume']}</td>\n                          <td style={{borderColor: '#8C8F9C'}} align=\"center\">{exchange[key]['total_volume']}</td>\n                          <td style={{borderColor: '#8C8F9C'}} align=\"center\">{exchange[key]['quantity']}</td>\n                          <td style={{borderColor: '#8C8F9C'}} align=\"center\">{exchange[key]['participation']}</td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                  </Col>\n                </Row>\n                <Row>\n                {\n                  Object.values(exchange[key]['company_ticker']).map((ticker, j) => (\n                    <Col xs={6}>\n                      <Container align=\"center\" width=\"150%\">\n                        <p style={{fontSize: '16px', color: 'white'}} key={j}>\n                          {stocks[ticker]['company_name']}\n                        </p>\n                        <p style={{fontSize: '14px', color: '#8C8F9C'}}>\n                          {stocks[ticker]['country']} - {ticker}\n                        </p>\n                        <ResponsiveContainer height={300} width='100%'>\n                          <LineChart\n                              width={650}\n                              height={350}\n                              data={[...stocks[ticker]['data']]}\n                              margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                            >\n                            <CartesianGrid strokeDasharray=\"3 3\" stroke='#8C8F9C'/>\n                            <XAxis stroke='#8C8F9C' dataKey=\"time\" />\n                            <YAxis stroke='#8C8F9C' domain={[\"dataMin - 10\", \"dataMax + 10\"]}/>\n                            <Tooltip \n                              itemStyle={{ fontWeight: \"bold\" }}\n                              formatter={function(value, name) {\n                                return `USD ${value}`;\n                              }}\n                              labelFormatter={function(value) {\n                                return `time: ${value}`;\n                              }}\n                            />\n                            <Line type=\"monotone\" dataKey='value' stroke=\"#E95765\" fill=\"#E95765\" strokeWidth=\"3\" />\n                            </LineChart>  \n                        </ResponsiveContainer>\n                        <Row style={{marginTop: '20px', marginLeft: '20px'}}>\n                          <Table className=\"table table-sm table-bordered\">\n                            <thead>\n                              <tr style={{color: '#8C8F9C', fontSize: '12px'}}>\n                                <th style={{borderColor: '#8C8F9C'}} align=\"center\">Volumen Total</th>\n                                <th style={{borderColor: '#8C8F9C'}} align=\"center\">Alto Histórico</th>\n                                <th style={{borderColor: '#8C8F9C'}} align=\"center\">Bajo Histórico</th>\n                                <th style={{borderColor: '#8C8F9C'}} align=\"center\">Último Precio</th>\n                                <th style={{borderColor: '#8C8F9C'}} align=\"center\">Cambio Porcentual</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              <tr style={{color: 'white', fontSize: '14px'}}>\n                                <td style={{borderColor: '#8C8F9C'}} align=\"center\">{stocks[ticker]['total_volume']}</td>\n                                <td style={{borderColor: '#8C8F9C'}} align=\"center\">{stocks[ticker]['higher']}</td>\n                                <td style={{borderColor: '#8C8F9C'}} align=\"center\">{stocks[ticker]['lower']}</td>\n                                <td style={{borderColor: '#8C8F9C'}} align=\"center\">{stocks[ticker]['last_price']}</td>\n                                <td style={{borderColor: '#8C8F9C'}} align=\"center\">{stocks[ticker]['porcentual_change']}</td>\n                              </tr>\n                            </tbody>\n                          </Table>\n                        </Row>                       \n                      </Container>\n                    </Col>\n                  ))\n                }\n                </Row>\n              </div>\n            ))\n          }\n        </div>\n      );\n    } else { \n      return( \n        <div className=\"container\">\n        </div>\n      ); \n    }\n  }\n    \n} \n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}